
local plr = game.Players.LocalPlayer
local questions = {"The human skeleton is made up of less than 100 bones.",
  "Mount Everest is the highest mountain in the world.",
  "The Great Wall of China can be seen from space.", 
  "The Amazon is the longest river in the world.", 
  "An octopus has three hearts.",
  "All planets in our solar system orbit the Sun in a circular path.", 
  "A group of lions is known as a ‘pride’.",
  "Butterflies taste with their feet.", "Sharks are mammals.", 
  "The human body is comprised of over 60% water.", "Venus is the closest planet to the Sun.", 
  "Roblox was created 2006", "Roblox was made 2006", "Roblox was made 2004", "Dolphins sleep with one eye open.",
  "Frogs can drink water through their skin.", "The adult human body has 32 teeth.","Gold is a good conductor of electricity.",
  "Antibiotics are effective against viruses.", "Mercury is the hottest planet in the solar system.",
  "Sound travels faster than light.",
  "Camels store water in their humps.","Lightning never strikes the same place twice.", 
  "“Its” and “It’s” have the same meaning.",
  "“Affect” is a verb, and “effect” is a noun.",
  "Every sentence must contain a verb.", 
  "“Your” and “You’re” don't mean the same thing.",
  "Cows have best friends.", 
  "Penguins are only found in Antarctica.",
  "A snail can sleep for three years.",
  "The human body has 205 bones.",
  "The human eye can distinguish about a million different colors.", 
  "Elephants are the only animals that can’t jump.", 
  "Water expands when it freezes.",
  "The Earth’s atmosphere is mostly oxygen.",
  "DNA is the primary genetic material in humans and most other organisms.",
  "Mars is known as the “Red Planet” due to its blue skies.", 
  "The Great Barrier Reef is visible from space.", "Bats are blind.",
  "The smallest bone in the human body is located in the ear.",
  "“Their,” “There,” and “They’re” are interchangeable.","“Fewer” is used for countable items, and “Less” is used for uncountable quantities.",
  "You can have as many friends as you would like on Roblox.", 
  "You can play on a computer, desktop, and laptop on Roblox.","The chemical element with the symbol Hg is Hydrogen.",
  "The Statue of Liberty was a gift from France to the United States.",
"The Amazon River is the longest river in the world.",
  "The planet Venus does not have any moons.", "The three primary colours are red, blue, and green.",
  "The Milky Way is a type of galaxy.","Humans can survive without oxygen for up to an hour.","Queen Elizabeth I was the daughter of Henry VIII.",
  "The first human landing on the Moon was in 1969.","The Aztec civilization was primarily located in what is now Canada."," The initial construction of the Great Wall of China began during the reign of Emperor Qin Shi Huang.",
  "The United States Declaration of Independence was signed in 1776.", " The Aztec civilization was primarily located in what is now Canada.",
  "The ancient Egyptian civilization was located along the Amazon River.", "“You and I” is always correct, and “You and me” is always incorrect.",
  "The Titanic was discovered before the 20th century ended.","Humans have more than five senses.','The Mona Lisa was painted by Leonardo da Vinci.", "Albert Einstein was awarded the Nobel Prize in Physics for the theory of relativity.",
  "There are two parts of the body that can't heal themselves", "Venus is the hottest planet in the solar system",
"India is the most populated country in the world", "M&M (snack) stands for Mars and Moordale", "The Caesar salad was invented in France", 
  "A golf ball is the fastest-recorded object in sports", "NBA stands for National Basketball Association", "If you sneeze with your eyes open, then your eyes will pop out",
  "Eating too many carrots can make your skin turn orange", "You can swallow and breathe at the same time", "You’re shorter at night than you are in the morning",
  "You can sneeze during your sleep", "Our blood contains gold", "There are 14 bones in a human foot", "Honey will usually never go bad", "Pizza was invented in Rome, Italy", "Ketchup was once used to cure diseases like diarrhoea and colds",
  "The Olympics are held every five years","Bananas are curved because they grow upwards towards the sun","Peeing on a jellyfish sting helps with the pain"}
print(#questions)
local getquestions = 0
for I, v in pairs(questions) do
print(I, v)
end
local f = {1,3,4,6,9,11,12,13,19,20,21,22,23,24,29,31,33,35,37,39,41,43,45,47,49,51,54,57,58,59,63,64,67,66,68,69,70,71,72,74,76,78,79,80,82} -- false section
local t = {2,5,7,8,10,14,15,16,17,18,25,26,27,28,30,32,34,36,38,40,42,44,46,48,50,52,53,55,56,60,61,62,65,73,75,77,81} -- true section
local answered = false
local blacklist = {}
local allow = {"devonareann","matheusmarcondes","abomination21","Top_Detective1",'Lilwolfs_sidekick'}

local loadingtime = math.random(2,3)
local limit = 10
local counter = -1 -- 0
local numberboards = {first = 0,second = 0,third = 0}
local leaderboard = {first = nil,second = nil,third = nil}

local right = 0
local wrong = 0

local inprocess = false
local gamereset = false
local cooldown = 0.5
local waittime = 2
local distance = 10
local pickran = 0
local stop = 0
local continue = 1
local cananswer = false
local db = false
local shuttingdown = "false"
local justsend = false
local ifchatted = false
local messaged = false
local skipping = false

function trueorfalse()
if messaged == true then
  messaged = false
end
counter = counter + 1
  cananswer = false
  db = true
  inprocess = true
if gamereset == false and counter ~= limit and stop == 0 then
if counter >= limit then
else

  pickran = math.random(1,#questions)
  
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Loading..." ,
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
wait(1)
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "True or False?" ,
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
  wait(waittime)
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = questions[pickran],
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
--end
  skipping = false
  answered = false
cananswer = true
  db = false
inprocess = false
  justsend = true
end
end
if counter >= limit and gamereset == false then 
  gamereset = true
gameover() 
end
  wait(1)
  justsend = false
ifchatted = false
end

function onerror()
counter = counter -1
local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Skipping question..",
        ["ImageId"] = 3545
    }
}
game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
wait(cooldown)
  trueorfalse()
end


function correct()
  if db == true and answered == true and inprocess == false and justsend == false and messaged == true and counter ~= limit and gamereset == false and stop == 0 then
  cananswer = false
    db = false
    right = right + 1
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Correct.",
        ["ImageId"] = 3545
    }
}
game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
    wait(waittime)
    local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "You now have ["..right.."] points.",
        ["ImageId"] = 3545
    }
}
game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
if db == false and answered == true then
  wait(waittime)
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Next question..",
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))

  wait(waittime + cooldown)
  trueorfalse()
    end
return
  else
 print("Not working UGH")
    onerror()
return
  end
  print("correct")
if messaged == false and cananswer == true then
end
end

function incorrect()
  if db == true and answered == true and inprocess == false and justsend == false and messaged == true and counter ~= limit and gamereset == false and stop == 0 then
  cananswer = false
    db = false
    wrong = wrong + 1
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Wrong.",
        ["ImageId"] = 3545
    }
}
game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
if db == false then
  wait(waittime)
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Next question..",
        ["ImageId"] = 3545
    }
}
game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
  wait(waittime + cooldown)
  trueorfalse()
    end
    return
else
print("Not working UGH")
  onerror()
return
  end
--print("incorrect")
if messaged == false and cananswer == true then 
 
end
end

function gameover()
  if counter == limit or counter >= limit then
local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Game Over",
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
    wait(3)
    if right > wrong then
    local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "You've won!",
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
    elseif right == wrong then
      local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Tied.",
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))

    elseif wrong > right then
      local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "You've lost.",
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
    end
wait(3)
local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "You've Gotten:        "..right.." Rights  "..wrong.."  Wrongs",
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
    print("You've Gotten    ",right," Rights  ",wrong,"  Wrongs")
    wait(5)
    local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Score Board:          (1)"..leaderboard['first'].." ["..numberboards[1].."]",
        ["ImageId"] = 3545
    }
}
wait(10)
local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Restarting...",
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
    print("Restarting")
wait(waittime + cooldown)
    counter = 0 
right = 0
wrong = 0
gamereset = false
    allplrs = game.Players:GetPlayers()
    trueorfalse()
  end
end


function starting()
local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Starting.",
        ["ImageId"] = 0
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
  task.wait(5)
for i = 1,loadingtime do
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Loading",
        ["ImageId"] = 0
    }
}
game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
  
  task.wait(cooldown)
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Loading.",
        ["ImageId"] = 0
    }
}
game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
  
  task.wait(cooldown)
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Loading..",
        ["ImageId"] = 0
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
  task.wait(cooldown)
  local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Loading...",
        ["ImageId"] = 0
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
  task.wait(cooldown)
  
end
end
starting()
wait(coldown)
local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Completed!",
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
task.wait(cooldown)
trueorfalse()
cananswer = true

 --[[allplrs = game.Players:GetPlayers()


game.Players.PlayerAdded:Connect(function()
  allplrs = game.Players:GetPlayers()
  
end) -- new players
game.Players.PlayerRemoving:Connect(function()
  allplrs = game.Players:GetPlayers()
end) -- old players]]

game.Players.PlayerAdded:Connect(function()
local allplrs = game.Players:GetPlayers()
for I, plrs in pairs(allplrs) do
    plrs.Chatted:Connect(function(msg)
      --allplrs = game.Players:GetPlayers()
if counter >= limit and gamereset == false then 
  gamereset = true
gameover() 
end
  if cananswer == true and db == false and stop == 0 and counter ~= limit and not blacklist[table.find(blacklist,plrs.DisplayName)] then
    if plrs.Character:FindFirstChild("HumanoidRootPart") ~= nil and (plrs.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude < distance and plrs.Character.Humanoid.Health ~= 0 then
      
      
      if string.find(msg, "tru") or string.find(msg, "fals") or string.find(msg, "Tru") or string.find(msg, "Fals") then
        messaged = true
        if right > tonumber(numberboards[1]) then
          numberboards[1] = right
          leaderboard[1] = plrs.DisplayName
          print("1",leaderboard[1],numberboards[1])
        end
      end
    if table.find(t, pickran) and string.find(msg, "tru") and not string.find(msg, "fals") or table.find(t, pickran) and string.find(msg, "Tru") then
      db = true

if answered == false and inprocess == false and db == true then
  
      answered = true
  print(pickran, msg)
      correct()
  
end
    elseif table.find(t, pickran) and string.find(msg, "fals") and not string.find(msg, "tru") or table.find(t, pickran) and string.find(msg, "Fals")   then
      db = true
if answered == false and inprocess == false and db == true then
  
      answered = true
  print(pickran, msg)
      incorrect()
      
end
    end -- answers for the truth side ^
    if table.find(f, pickran) and string.find(msg, "fals") and not string.find(msg, "tru") or table.find(f, pickran) and string.find(msg, "Fals")  then
      db = true
if answered == false and inprocess == false and db == true then
      answered = true
  print(pickran, msg)
      correct()
end
    elseif table.find(f, pickran) and string.find(msg, "tru") and not string.find(msg, "fals") or table.find(f, pickran) and string.find(msg, "Tru") and not string.find(msg, "Fals")  then
      db = true
if answered == false and inprocess == false and db == true then
      answered = true
  print(pickran, msg)
      incorrect()
end
    end -- answers for the false side
      else
    end -- detect
  end -- can answer
    end) -- players chatted
  end -- get players
 end) -- players joined
  
local deb = false
local allplrs = game.Players:GetPlayers()
for i, plrs in pairs(allplrs) do
plrs.Chatted:Connect(function(msg)
  for a, tab in pairs(allow) do
  if shuttingdown == "false" and string.find(plrs.Name, tab) then
    
  people = game.Players:GetPlayers()
  if msg == "!blacklist "..string.sub(msg, 12) and stop == 0 then
    for i, v in pairs(people) do
     -- for n, t in pairs(blacklist) do
      if string.find(v.Name, tostring(string.sub(msg,12))) or string.find(v.DisplayName, tostring(string.sub(msg,12)))  then
       -- print(v.DisplayName)
        if v.DisplayName then
        table.insert(blacklist,#blacklist + 1,tostring(v.DisplayName))
        print("Blacklist:", table.concat(blacklist,""))
        else
          print(v.Name, "Dont have display name!")
        end
      end
    end
  end
  
  
  if msg == "!unblacklist "..string.sub(msg,14) and stop == 0 then
    for i, v in pairs(people) do
      for n, t in pairs(blacklist) do
--print(n,t)
        if string.find(t,tostring(string.sub(msg,14))) then
--print("unblacklisting",t)
          table.remove(blacklist,blacklist[t] )
          print("UnBlacklist:", table.concat(blacklist,""))
        end
      end
      
    end
  end
  
    if msg == "!allow "..string.sub(msg,8) and deb == false then
      deb = true
      for i, v in pairs(people) do
      if string.find(v.Name, tostring(string.sub(msg,8))) then
        if v.Name then
        table.insert(allow,#allow + 1,tostring(v.Name))
        print("Admin Perms:", table.concat(allow,""))
          wait(5)
          deb = false
        end
      end
      end
    end
    
    if msg == "!unallow "..string.sub(msg,10) then
      for i, v in pairs(people) do
      for n, t in pairs(allow) do
        if string.find(t,tostring(string.sub(msg,10))) and not string.find(t,"devonareann") then
          table.remove(allow,allow[t] )
          print("Admin Perms Removed:", table.concat(allow,""))
        end
      end
      end
    end

if msg == "!addtext "..string.sub(msg,10) then 
local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = string.sub(msg,10),
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
end
    
    if msg == "!cmds" then
      local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = 'your commands are: blacklist, unblacklist [DisplayName],skip, fix, stop, pause, continue, addtext [text], limit [number], radius [number], setpoints [number], setwrongs [number]',
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
      
    end
  
  if msg == "!radius "..string.sub(msg, 9) then
    print("Distance are set to",tonumber(string.sub(msg,9)) )
    distance = tonumber(string.sub(msg,9))
  end

if msg == "!limit "..string.sub(msg,8) then

limit = tonumber(string.sub(msg,8))
  print("limit is now:",limit)
end
  
  if msg == "!skip" then
    if skipping == false then
      skipping = true
    trueorfalse()
counter = counter -1
    end
  end
    
    if msg == "!cooldown "..string.sub(msg,11) then
      waittime = string.sub(msg,11)
    end

if msg == "!fix" and messaged == false then
counter = counter -1
stop = 0 
trueorfalse()
end
    if msg == "!end" then
      counter = limit
    end
if msg == "!stop" or msg == "!pause" then
 stop = 1 
for I = 1,10 do
wait(0.5)
stop = 1
local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "This Program was stopped by the owner/admin",
        ["ImageId"] = 3545
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
if stop == 0 then
break
end
end
end
if msg == "!continue" and stop == 1 then
counter = counter -1
stop = 0 
trueorfalse()
end
if msg == "!setpoints "..string.sub(msg, 12) then
right = tonumber(string.sub(msg,12))
end
if msg == "!addpoints "..string.sub(msg, 12) then
right = right + tonumber(string.sub(msg,12))
end
if msg == "!removepoints "..string.sub(msg, 15) then
right = right - tonumber(string.sub(msg,12))
end
    if msg == "!setwrongs "..string.sub(msg, 12) then
wrong = tonumber(string.sub(msg,12))
end
if msg == "!addwrongs "..string.sub(msg, 12) then
wrong = wrong + tonumber(string.sub(msg,12))
end
if msg == "!removewrongs "..string.sub(msg, 15) then
wrong = wrong - tonumber(string.sub(msg,12))
end
  
  if msg == "!shutdown" and stop == 0 then
        shuttingdown = "true"
    stop = 1
        for i = 1,4 do
    local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "Shutting Down!",
        ["ImageId"] = 3545
    }
}
game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
          wait(1)
            local args = {
    [1] = "Update",
    [2] = {
        ["DescriptionText"] = "!",
        ["ImageId"] = 0
    }
}

game:GetService("ReplicatedStorage").CustomiseBooth:FireServer(unpack(args))
          wait(1)
        end
    local args = {
    [1] = "Update",
